# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

default:
  image: node:22-slim
  tags:
    - ${GITLAB_RUNNER_LARGE}

include:
  - project: "ppds-wave/ci"
    ref: "main"
    file: "/templates/.base-aws.yml"
  - local: "/.gitlab-ci-helper.yml"

variables:
  DOCKER_IMAGE: my-rest-api
  DOCKER_IMAGE_TAG: '$(echo "$CI_COMMIT_MESSAGE"|grep ":[0-9]*.[0-9]*.[0-9]*"|cut -d ":" -f2| grep .|| echo "$CI_COMMIT_SHORT_SHA")'

stages: # List of stages for jobs, and their order of execution
  - tests
  - version
  - build
  - docker-build
  - deploy

semantic_release:
  stage: version
  only:
    refs:
      - main
    variables:
      # Don't make a release when:
      #   - the last commit is already a release commit
      #   - or the last commit is from a renovate dependency update.
      - $CI_COMMIT_MESSAGE !~ /^(chore\(release\)\:\s\d+\.\d+.\d+|deps\(deps\)\:.*)/
  image: node:22-slim
  script:
    - apt-get update
    - apt-get install git -y
    - git config user.email "${GITLAB_CI_EMAIL}"
    - git config user.name "${GITLAB_CI_NAME}"
    - git remote set-url origin https://oauth2:${GITLAB_NPM_TOKEN}@gitlab.com/${CI_PROJECT_PATH}
    - git fetch
    - git checkout -b "${CI_COMMIT_REF_NAME}" "origin/${CI_COMMIT_REF_NAME}"
    - yarn install --frozen-lockfile
    - yarn release
    - git push --follow-tags origin "${CI_COMMIT_REF_NAME}"

build:
  stage: build
  script:
    - yarn install --frozen-lockfile --non-interactive

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
      allow_failure: false
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: false

docker-build:
  stage: docker-build
  extends: .kaniko
  before_script:
    - wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem
    - export DOCKER_IMAGE_TAG=$(eval echo ${DOCKER_IMAGE_TAG})
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE}:${DOCKER_IMAGE_TAG}"
  rules:
    - if: $CI_COMMIT_TAG
      when: always
      allow_failure: false

deploy:
  stage: deploy
  extends: .service_deploy
  variables:
    ECS_TASK_DEFINITION_TEMPLATE: ecs-task-definition-production.json
    ECS_CLUSTER_NAME: tpvision
    ECS_SERVICE_NAME: ${DOCKER_IMAGE}
    ECS_TASK_DEFINITION_NAME: ${DOCKER_IMAGE}
    DOCKER_REGISTRY: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
    NOTIFY: ${NOTIFY:-no}
  rules:
    - if: $CI_COMMIT_TAG
      when: always
      allow_failure: false
